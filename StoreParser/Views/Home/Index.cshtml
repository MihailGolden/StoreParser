@model IEnumerable<StoreParser.Models.Product>

@{ ViewData["Title"] = "Parsed priducts"; }

<h1 class="header-light">Store: <code>https://www.prodj.com.ua/studio-monitors/</code></h1>
<hr />


<h2 class="header-light text-center">Product list - <span class="alert-info">@Model.Count() products in DB</span></h2>

@if (Model.Count() < 1)
{
    <h3 class="alert-danger">If you see this message, then the database has no data.</h3>
    <h3>Please go to the "Admin" menu item and click the "Start" button to start the scheduler</h3>
    <h4>Sheduler parses the site once a day. Good luck ;)</h4>
    <p>
        Info: you can change the interval of parsing in the StoreParser.Services.TimerBackgroundWorker.ParserScheduler class
        - period variable
    </p>

}

<div class="container">
    <div ">
        @foreach (var product in Model)
        {
            @if (product.Name != null)
            {
                <div class="col-xs-12 col-md-6">
                    <div class="card">
                        <div style="height:120px">
                            @if (@product.Images.Count() > 0)
                            {
                                <p>
                                    @for (int i = 0; i < product.Images.Count() && i < 3; i++)
                                    {
                                        @if (product.Images[i].Data != null)
                                        {

                                            <img style="max-width:120px; max-height:120px;" src="data:image/jpeg;base64,@(Convert.ToBase64String(product.Images[i].Data))" alt="Product image" />
                                        }
                                    }
                                </p>
                            }
                        </div>
                        <h3>
                            Price:
                        </h3>
                        @*@foreach (var price in product.Prices)
                        {
                            <p>
                                <span class="label label-danger">@price.ProductPrice </span>
                                <span>&nbsp; - @price.PriceLastDate</span>
                            </p>
                        }*@
                        @{
                            var lastDate = product.Prices.Max(d => d.PriceLastDate);
                            var actualPrice = product.Prices.Where(p => p.PriceLastDate == lastDate).ToList().FirstOrDefault();
                            <p>
                                <span class="label label-danger">@actualPrice.ProductPrice.ToString() </span>
                                <span>&nbsp; - @lastDate</span>
                            </p>
                        }
                        <div class="card-body">
                            <h3 class="card-title">@product.Name</h3>
                            <p class="card-text">
                                @if (product.Description.Length > 150)
                                {
                                    @product.Description.Substring(0, 150)
                                    <a href="home/getproduct/@product.Id"><span class="link">more...</span></a>
                                }
                            </p>
                        </div>
                        <a href="home/getproduct/@product.Id">
                            <button class="btn btn-success">Go to product</button>
                        </a>
                    </div>
                </div>
            }
        }
    </div>
</div>
